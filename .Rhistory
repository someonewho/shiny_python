runApp('R/making_UI.R')
runApp('R/making_UI.R')
runApp('R/making_UI.R')
runApp('R/making_output.R')
runApp('R/making_output.R')
runApp('R/making_output.R')
runApp('R/making_output.R')
runApp('R/making_output.R')
runApp('R/making_output.R')
runApp('R/making_output.R')
runApp('R/prac1')
runApp('R/prac1')
shiny::runApp('R/prac1')
runApp('R/prac1')
runApp('R/prac1')
runApp('R/prac1')
runApp('R/prac1')
install.packages(c("tm", "wordcloud"))
install.packages("wordcloud")
install.packages("memoise")
source('~/R/prac1/app.R', echo=TRUE)
fluidPage(
# Application title
titlePanel("Word Cloud"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
selectInput("selection", "Choose a book:",
choices = books),
actionButton("update", "Change"),
hr(),
sliderInput("freq",
"Minimum Frequency:",
min = 1,  max = 50, value = 15),
sliderInput("max",
"Maximum Number of Words:",
min = 1,  max = 300,  value = 100)
),
# Show Word Cloud
mainPanel(
plotOutput("plot")
)
)
)
source('R/prac1/app.R')
runApp('R/prac1')
runApp('R/prac1')
output$plot <- renderPlot({
v <- terms()
wordcloud_rep(names(v), v, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
})
## BASIC DATA STRUCTURES
# vectors
c(1,2,6,4,8)
x <- c(88,5,15,44)
x
x[1:3]
x <- c(x[1:3],168,x[4])
x
1:30
y.var = [1:30]
y.var <- 1:30
y.var <- c(1:30)
# vector elements can have names
v <- c(10,20,30)
v
names(v) <- c("Moe","Larry","Curly")
v
y.name <- c(1:30)
y
typeof(v)
names(v)
# matrix is a vector with two dimensions
A <- 1:6 # A is a vector at this point
print(A) # same as expressing, or evaluating, A
dim(A) <- c(2,3) # Force vector A to be 2 x 3
print(A) # Now A is a matrix, no longer a vector
# make it a "persistent object"
persistent.v <- c(v["Moe"],v["Curly"])
persistent.v
# matrix is a vector with two dimensions
A <- 1:6 # A is a vector at this point
print(A) # same as expressing, or evaluating, A
# list is an ordered collection of objects
e <- list(thing="hat",size="8.25")
e
# call first component of e by name
e["thing"]
# what is in first component of e is a character vector
# with one element "hat"
e[[1]]
e[[2]]
# first component of e, call by index
e[1]
# call first component of e by name
e["thing"]
# list is an ordered collection of objects
e <- list(thing=[1:30],size="8.25")
# list is an ordered collection of objects
e <- list(thing=1:30,size="8.25")
# call first component of e by name
e["thing"]
# list is an ordered collection of objects
e <- list(thing="hat",size="8.25")
# list is an ordered collection of objects
e <- list(thing="hat",size="8.25", mat=matrix(A, nrow=2, ncol=3))
e
# there is no third component of list 'e'
e[3]
# list is an ordered collection of objects
e <- list(thing="hat",size="8.25",
mat=matrix(A, nrow=2, ncol=3)
e.list = e)
e <- list(thing="hat",size="8.25",
mat=matrix(A, nrow=2, ncol=3),
e.list = e)
# first component of e, call by index
e[1]
# can reference list components and elements with subscripts
e
# remember what is list 'e'?:
e["e.list"]
e[[2]]
e["size"][[2]]
# there is no third component of list 'e'
e[3]
# can combine data heterogeneous
# R data structures using list() function
x1 <- c(1, 2, 3);
x1
# can combine data heterogeneous
# R data structures using list() function
x1 <- c(1, 2, 3);x1
# data frame is a list
# here is data frame for wins/losses
# in National League East:
teams <- c("PHI","NYM","FLA","ATL","WSN") # character vector
teams
w <- c(92, 89, 94, 72, 59) # numeric vector
w
l <- c(70, 73, 77, 90, 102) # numeric vector
l
nleast <- data.frame(teams,w,l) # data frame
nleast
# can refer to components (or columns)
# using the $ operator
nleast$w
nleast$teams == "FLA"
nleast$l[nleast$teams=="FLA"]
install.packages(c("car", "HSAUR2"))
x <- scan()
x <- scan()
x
names <- scan(what=" ")
nsmrd
namse
names
names <- scan(what=" ")
names
names <- scan("C:\Users\82103\Desktop\data mining with R\Input-Output-Materials\R data\scan.txt",
what=list(age=0, name=""))
x <- scan("C:\Users\82103\Desktop\data mining with R\Input-Output-Materials\R data\scan.txt", what=list(age=0, name=""))
names <- scan("C:/Users/82103/Desktop/data mining with R/Input-Output-Materials/R data/scan.txt",
what=list(age=0, name=""))
names
#x <- scan("c:/temp/scan.txt", what=list(age=0, name=""))
x <- names
x
unlist(x) # gets rid of first null component
x # but x is unchanged, unless we do:
list.files(path = dir.choose())
choose.dir()
install.packages(c("ellipse", "nutshell"))
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
# data for bar charts of frequency of births:
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="red")
# to remove objects from workspace
rm(list=ls())
# garbage collection good for more efficent memory storage
gc()
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
# Shows number of births and number of variables,
# that is, number of rows and columns in the data:
dim(births2006.smpl)
# data for bar charts of frequency of births:
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="red")
## for color, use col="red" or omit the color argument
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
# data for bar charts of frequency of births:
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="red")
## for color, use col="red" or omit the color argument
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,
groups=FALSE,xlab="Day of Week")#,col="black")
# separate histograms:
histogram(~DBWT|DPLURAL,data=births2006.smpl,
layout=c(1,5))#,col="black")
#trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
# separate histograms:
histogram(~DBWT|DPLURAL,data=births2006.smpl,
layout=c(1,5))#,col="black")
histogram(~DBWT|DMETH_REC,data=births2006.smpl,
layout=c(1,3))#,col="black")
# Smoothed versions of the histograms, using the
# lattice command density plot, are also shown.
densityplot(~DBWT|DPLURAL,data=births2006.smpl,
layout=c(1,5),plot.points=FALSE)#,col="black")
densityplot(~DBWT,groups=DPLURAL,data=births2006.smpl,
plot.points=FALSE)
# Dot plot shows quite clearly that there are only few
# observations in that last group, while most other
# groups have many observations:
dotplot(~DBWT|DPLURAL,data=births2006.smpl,
layout=c(1,5),plot.points=FALSE)#,col="black")
# birth weight by day of the week:
xyplot(DBWT~DOB_WK,data=births2006.smpl)#,col="black")
# here is conditioned on plurality of births:
xyplot(DBWT~DOB_WK|DPLURAL,data=births2006.smpl,
layout=c(1,5))#,col="black")
# The last smoothed scatter plot shows there is little
# association between birth weight and weight gain
# during the course of the pregnancy.
smoothScatter(births2006.smpl$WTGAIN,
births2006.smpl$DBWT)
# conditioned on plurality:
xyplot(DBWT~WTGAIN|DPLURAL,data=births2006.smpl,
layout=c(1,5))#,col="black")
# The bar plot illustrates graphically how average birth
# weight decreases with multiple deliveries. It also
# shows that average birth weight for males is slightly
# higher than that for females.
fac=factor(births2006.smpl$DPLURAL)
res=births2006.smpl$DBWT
t4=tapply(res,fac,mean,na.rm=TRUE)
t4
t5=tapply(births2006.smpl$DBWT,
INDEX=list(births2006.smpl$DPLURAL,
births2006.smpl$SEX),
FUN=mean,na.rm=TRUE)
t5
barplot(t4,ylab="DBWT")
barplot(t5,beside=TRUE,ylab="DBWT")
# birth weight. An earlier frequency distribution table
# of estimated gestation period indicates that "99" is
# used as the code for "unknown". For the subsequent
# calculations, we omit all records with unknown gestation
# period (i.e., value 99). The graphs show that birth weight
# increases with the estimated gestation period, but
# that birth weight is little affected by the weight
# gain. Note that the contour lines are essentially
# horizontal and that their associated values increase
# with the estimated gestation period.
t5=table(births2006.smpl$ESTGEST)
t5
new=births2006.smpl[births2006.smpl$ESTGEST != 99,]
t51=table(new$ESTGEST)
t51
# "drill down" to the file in your stored course materials:
don <- read.csv(file.choose())
# "drill down" to the file in your stored course materials:
don <- read.csv(file.choose())
# view first five records:
don[1:5,]
# this is a tabulate function, it counts frequencies:
table(don$Class.Year)
# is an integer column but table() sees the integers
# as factors
class(don$Class.Year)
# create a barchart
barchart(table(don$Class.Year),horizontal=FALSE,
xlab="Class Year",col="black")
# add up the donations
don$TGiving=don$FY00Giving+don$FY01Giving+don$FY02Giving+don$FY03Giving+don$FY04Giving
# take a look, note it was adding columns:
don$TGiving
# take mean of total giving, is vectorized
# function so we get a single number
mean(don$TGiving)
# compute standard deviation of total giving,
# is very large, why is this?
sd(don$TGiving)
# quantile() provides a variety of summary information
# in 5% increments:
quantile(don$TGiving,probs=seq(0,1,0.05))
# in 1% increments starting at 95%....we see that
# one huge donation at the end
quantile(don$TGiving,probs=seq(0.95,1,0.01))
# finally, draw a histogram, is distorted because
# of large donation
hist(don$TGiving)
# look at donations up to $1,000 max:
hist(don$TGiving[don$TGiving!=0][don$TGiving[don$TGiving!=0]<=1000])
# "drill down" to the file in your stored course materials:
don <- read.csv(file.choose())
View(don)
view(don)
# view first five records:
don[1:5,]
# create a barchart
barchart(table(don$Class.Year),horizontal=FALSE,
xlab="Class Year",col="black")
# add up the donations
don$TGiving=don$FY00Giving+don$FY01Giving+don$FY02Giving+don$FY03Giving+don$FY04Giving
# take a look, note it was adding columns:
don$TGiving
# take mean of total giving, is vectorized
# function so we get a single number
mean(don$TGiving)
# compute standard deviation of total giving,
# is very large, why is this?
sd(don$TGiving)
# quantile() provides a variety of summary information
# in 5% increments:
quantile(don$TGiving,probs=seq(0,1,0.05))
# in 1% increments starting at 95%....we see that
# one huge donation at the end
quantile(don$TGiving,probs=seq(0.95,1,0.01))
# finally, draw a histogram, is distorted because
# of large donation
hist(don$TGiving)
# quantile() provides a variety of summary information
# in 5% increments:
quantile(don$TGiving,probs=seq(0,1,0.05))
# create a barchart
barchart(table(don$Class.Year),horizontal=FALSE,
xlab="Class Year",col="black")
# add up the donations
don$TGiving=don$FY00Giving+don$FY01Giving+don$FY02Giving+don$FY03Giving+don$FY04Giving
# take a look, note it was adding columns:
don$TGiving
ddd=don[don$TGiving>=30000,]
ddd
# selectively list columns 1 thru 5, and 12
ddd1=ddd[,c(1:5,12)]
ddd1
# put them in order, from highest to lowest
ddd1[order(ddd1$TGiving,decreasing=TRUE),]
boxplot(TGiving~Class.Year,data=don,outline=FALSE)
boxplot(TGiving~Gender,data=don,outline=FALSE)
boxplot(TGiving~Marital.Status,data=don,outline=FALSE)
boxplot(TGiving~AttendenceEvent,data=don,outline=FALSE)
# get mean by major:
t4=tapply(don$TGiving,don$Major,mean,na.rm=TRUE)
t4
# tabulate by major
t5=table(don$Major)
t5
# combine those two columns
t6=cbind(t4,t5)
t6
mosaicplot(factor(don$Gender)~factor(don$TGivingIND))
Data=data.frame(don$FY04Giving,don$FY03Giving,
don$FY02Giving,don$FY01Giving,
don$FY00Giving)
correlation=cor(Data)
correlation
plot(Data)
library(ellipse)
plotcorr(correlation)
mosaicplot(factor(don$Gender)~factor(don$TGivingIND))
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
install.packages("maps")
install.packages("maps")
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
ui <- fluidPage(
titlePanel("censusMap_Vis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
source('C:/Users/82103/Desktop/purdue project/shiny/plotly-shiny/What_You_Need/runApp.R')
install.packages("shiny")
shiny::runApp()
library(shiny); source('C:/Users/82103/Desktop/purdue project/shiny/plotly-shiny/What_You_Need/runApp.R')
shiny::runApp()
install.packages("quantmod")
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
install.packages("babynames")
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
install.packages("reticulate")
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
Y
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
View(adjust)
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
shiny::runApp('C:/Users/82103/Desktop/purdue project/shiny/My_App')
return(big0)
setwd('C:/Users/82103/Desktop/purdue project/shiny/My_App')
#read data with .csv file
Small <- read.csv("Data/small/small1_02_16.csv", stringsAsFactors=F)
Median <- read.csv("Data/middle/middle4_02_16.csv", stringsAsFactors=F)
propTest <- read.csv("Data/CoolTerm Capture 2020-02-23 16-05-53_big04.csv", stringsAsFactors=F)
library(tidyverse)
library(fpp2)
Bigprop0Holt <- function() {
big0 <- holt(propTest$prop0, alpha = .9, h = 50)
big1 <- holt(propTest$prop1, alpha = .9, h = 50)
big2 <- holt(propTest$prop2, alpha = .9, h = 50)
autoplot(big1)
return(big0)
}
BigCO0Holt <- function() {
bigCO0 <- holt(propTest$CO0, alpha = .9, h = 50)
bigCO1 <- holt(propTest$CO1, alpha = .9, h = 50)
bigCO2 <- holt(propTest$CO2, alpha = .9, h = 50)
autoplot(bigCO1)
return(bigCO0)
}
Smallprop0Holt <- function() {
small0 <- holt(Small$prop0, alpha = .9, h = 50)
small1 <- holt(Small$prop1, alpha = .9, h = 50)
small2 <- holt(Small$prop2, alpha = .9, h = 50)
autoplot(small1)
return(small0)
}
SmallCO0Holt <- function() {
small0 <- ses(Small$CO0, alpha = .9, h = 50)
small1 <- ses(Small$CO1, alpha = .9, h = 50)
small2 <- ses(Small$CO2, alpha = .9, h = 50)
autoplot(small1)
return(small0)
}
Medianprop0Holt <- function() {
small0 <- holt(Median$prop0, alpha = .9, h = 50)
small1 <- holt(Median$prop1, alpha = .9, h = 50)
small2 <- holt(Median$prop2, alpha = .9, h = 50)
autoplot(small1)
return(small0)
}
MedianCO0Holt <- function() {
small0 <- holt(Median$CO0, alpha = .9, h = 50)
small1 <- holt(Median$CO1, alpha = .9, h = 50)
small2 <- holt(Median$CO2, alpha = .9, h = 50)
autoplot(small1)
return(small0)
}
Bigprop0Holt
plot(big1)
Bigprop0Holt <- function() {
big0 <- holt(propTest$prop0, alpha = .9, h = 50)
big1 <- holt(propTest$prop1, alpha = .9, h = 50)
big2 <- holt(propTest$prop2, alpha = .9, h = 50)
plot(big1)
return(big0)
}
runApp()
